FROM nvidia/cuda:9.0-cudnn7-devel-ubuntu16.04

MAINTAINER Paul Kwon <paulkwon@phantom.ai>

ARG TENSORFLOW_VERSION=1.3.0
ARG TENSORFLOW_ARCH=gpu

#RUN echo -e "\n**********************\nNVIDIA Driver Version\n**********************\n" && \
#	cat /proc/driver/nvidia/version && \
#	echo -e "\n**********************\nCUDA Version\n**********************\n" && \
#	nvcc -V && \
#	echo -e "\n\nBuilding your Deep Learning Docker Image...\n"

# Install some dependencies
RUN apt-get update && apt-get install -y \
		bc \
		build-essential \
		cmake \
		curl \
		g++ \
		gfortran \
		git \
		libffi-dev \
		libfreetype6-dev \
		libhdf5-dev \
		libjpeg-dev \
		liblcms2-dev \
		libopenblas-dev \
		liblapack-dev \
		libopenjpeg5 \
		libpng12-dev \
		libssl-dev \
		libtiff5-dev \
		libwebp-dev \
		libzmq3-dev \
		nano \
		pkg-config \
		python-dev \
		software-properties-common \
		unzip \
		vim \
		wget \
		zlib1g-dev \
		qt5-default \
		libvtk6-dev \
		zlib1g-dev \
		libjpeg-dev \
		libwebp-dev \
		libpng-dev \
		libtiff5-dev \
		libjasper-dev \
		libopenexr-dev \
		libgdal-dev \
		libdc1394-22-dev \
		libavcodec-dev \
		libavformat-dev \
		libswscale-dev \
		libtheora-dev \
		libvorbis-dev \
		libxvidcore-dev \
		libx264-dev \
		yasm \
		libopencore-amrnb-dev \
		libopencore-amrwb-dev \
		libv4l-dev \
		libxine2-dev \
		libtbb-dev \
		libeigen3-dev \
		libcupti-dev \
		python-dev \
		python-tk \
		python-numpy \
		python3-dev \
		python3-tk \
		python3-numpy \
		ant \
		default-jdk \
		doxygen \
		python3-pip \
#        sudo \
		&& \
	apt-get clean && \
	apt-get autoremove && \
	rm -rf /var/lib/apt/lists/* && \
# Link BLAS library to use OpenBLAS using the alternatives mechanism (https://www.scipy.org/scipylib/building/linux.html#debian-ubuntu)
	update-alternatives --set libblas.so.3 /usr/lib/openblas-base/libblas.so.3

# Install pip
RUN curl -O https://bootstrap.pypa.io/get-pip.py && \
	python get-pip.py && \
	rm get-pip.py

# Add SNI support to Python
RUN pip --no-cache-dir install \
		pyopenssl \
		ndg-httpsclient \
		pyasn1

# Install useful Python packages using apt-get to avoid version incompatibilities with Tensorflow binary
# especially numpy, scipy, skimage and sklearn (see https://github.com/tensorflow/tensorflow/issues/2034)
#RUN apt-get update && apt-get install -y \
#		python-numpy \
#		python-scipy \
#		python-nose \
#		python-h5py \
#		python-skimage \
#		python-matplotlib \
#		python-pandas \
#		python-sklearn \
#		python-sympy \
#		&& \
#	apt-get clean && \
#	apt-get autoremove && \
#	rm -rf /var/lib/apt/lists/*

# Install other useful Python packages using pip
RUN pip --no-cache-dir install --upgrade ipython && \
	pip --no-cache-dir install \
		Cython \
		ipykernel \
		jupyter \
		path.py \
		Pillow \
		pygments \
		six \
		sphinx \
		wheel \
		zmq \
		&& \
	python -m ipykernel.kernelspec

# Install Tensorflow
# NOTE! This is CPU version since for now Tensorflow does not support CUDA9 and CUDnn7
RUN pip --no-cache-dir install --upgrade tensorflow
RUN pip3 --no-cache-dir install --upgrade tensorflow

RUN mkdir /root/downloads
COPY tensorRT3/TensorRT-3.0.2.Ubuntu-16.04.3.x86_64.cuda-9.0.cudnn7.0.tar.gz /root/downloads
COPY tensorRT3/tensorrt_tensorflow_ex.py /root

RUN cd /root/downloads/ && \
    tar zxvf TensorRT-3.0.2.Ubuntu-16.04.3.x86_64.cuda-9.0.cudnn7.0.tar.gz -C /root
RUN cd /root/downloads/ && \
    tar zxvf TensorRT-3.0.2.Ubuntu-16.04.3.x86_64.cuda-9.0.cudnn7.0.tar.gz -C /root

ENV LD_LIBRARY_PATH ${LD_LIBRARY_PATH}:/root/TensorRT-3.0.2/lib/
RUN cd /root/TensorRT-3.0.2/python && \
    pip2 install tensorrt-3.0.2-cp27-cp27mu-linux_x86_64.whl && \
	pip3 install tensorrt-3.0.2-cp35-cp35m-linux_x86_64.whl

RUN cd /root/TensorRT-3.0.2/uff && \
    pip2 install uff-0.2.0-py2.py3-none-any.whl && \
	pip3 install uff-0.2.0-py2.py3-none-any.whl

RUN pip2 install --upgrade numpy
RUN pip3 install --upgrade numpy

# Set up notebook config
COPY jupyter_notebook_config.py /root/.jupyter/

# Jupyter has issues with being run directly: https://github.com/ipython/ipython/issues/7062
COPY run_jupyter.sh /root/

# Expose Ports for TensorBoard (6006), Ipython (8888)
EXPOSE 6006 8888

WORKDIR "/root"
CMD ["/bin/bash"]
